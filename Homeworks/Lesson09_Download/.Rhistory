knitr::opts_chunk$set(echo = TRUE)
# define function for plotting so we can reuse in later problems
plotTour <- function(x,y,tour,totDist,titleString){
# x = vector of x-coordinates of cities
# y = vector of y-coordinates of cities
# tour = vector of indices showing order in which cities are visited, e.g c(1,2,4,3,1)
# titleString = string to appear at top of plot
numcities = length(x);
str = paste(titleString," Total distance = ",as.character(totDist));
plot(x, y, type = "n", asp = 1, xlab = "", ylab = "", main = str);
points(x, y, pch = 16, cex = 1.5, col = "grey")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10), col = "lightgrey")
tour <- c(tour, tour[1])
n <- length(tour)
arrows(x[tour[-n]], y[tour[-n]],
x[tour[-1]], y[tour[-1]],
length = 0.15, angle = 45,
col = "steelblue", lwd = 2)
}
# here is graph of a random tour
n = 10;
x = runif(n, min = 0, max = 1000)
y = runif(n, min = 0, max = 1000)
tour = sample(1:10)
tour
# define function for plotting so we can reuse in later problems
plotTour <- function(x,y,tour,totDist,titleString){
# x = vector of x-coordinates of cities
# y = vector of y-coordinates of cities
# tour = vector of indices showing order in which cities are visited, e.g c(1,2,4,3,1)
# titleString = string to appear at top of plot
numcities = length(x);
str = paste(titleString," Total distance = ",as.character(totDist));
plot(x, y, type = "n", asp = 1, xlab = "", ylab = "", main = str);
points(x, y, pch = 16, cex = 1.5, col = "grey")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10), col = "lightgrey")
tour <- c(tour, tour[1])
n <- length(tour)
arrows(x[tour[-n]], y[tour[-n]],
x[tour[-1]], y[tour[-1]],
length = 0.15, angle = 45,
col = "steelblue", lwd = 2)
}
# here is graph of a random tour
n = 10;
x = runif(n, min = 0, max = 1000)
y = runif(n, min = 0, max = 1000)
tour = sample(1:10)
tour = c(tour,tour[1])
totDist = 732 # made up, below use the tourLength function to compute
titleStr = 'A sample graph'
plotTour(x,y,tour,totDist,titleStr)
tour
# define function for plotting so we can reuse in later problems
plotTour <- function(x,y,tour,totDist,titleString){
# x = vector of x-coordinates of cities
# y = vector of y-coordinates of cities
# tour = vector of indices showing order in which cities are visited, e.g c(1,2,4,3,1)
# titleString = string to appear at top of plot
numcities = length(x);
str = paste(titleString," Total distance = ",as.character(totDist));
plot(x, y, type = "n", asp = 1, xlab = "", ylab = "", main = str);
points(x, y, pch = 16, cex = 1.5, col = "grey")
abline(h = pretty(range(x), 10), v = pretty(range(y), 10), col = "lightgrey")
tour <- c(tour, tour[1])
n <- length(tour)
arrows(x[tour[-n]], y[tour[-n]],
x[tour[-1]], y[tour[-1]],
length = 0.15, angle = 45,
col = "steelblue", lwd = 2)
}
# here is graph of a random tour
n = 10;
x = runif(n, min = 0, max = 1000)
y = runif(n, min = 0, max = 1000)
tour = sample(1:10)
#tour = c(tour, tour[1])
totDist = 732 # made up, below use the tourLength function to compute
titleStr = 'A sample graph'
plotTour(x,y,tour,totDist,titleStr)
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(eurodist, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 20000, temp = 100,
trace = FALSE, REPORT = 500) )
# this is supposedly the 48 captial cities in the continental United States,
# but I think things are a little off and I don't know the units.
# The data is available here
# http://people.sc.fsu.edu/~jburkardt/datasets/tsp/tsp.html
# load the data
distmat <- as.matrix(read.table("att48_d.txt"))
setwd("~/Google Drive/Gdrive_snap_May_15/MS Data Science/DS 775/Class Materials/Weekly Content/Lesson_09/Sandbox_JB/Lesson 9 HW/Lesson09_Download")
# this is supposedly the 48 captial cities in the continental United States,
# but I think things are a little off and I don't know the units.
# The data is available here
# http://people.sc.fsu.edu/~jburkardt/datasets/tsp/tsp.html
# load the data
distmat <- as.matrix(read.table("resources/att48_d.txt"))
coord <- as.matrix(read.table("resources/att48_xy.txt"))
# this is supposedly the best possible tour
tour_best <- as.vector(as.matrix(read.table("resources/att48_s.txt")))
tour_best <- tour_best[1:48]
x <- coord[,1];
y <- coord[,2];
numcities <- length(x);
tourLength <- function(tour,D) {  # Target function
tour.wrap <- embed(c(tour,tour[1]), 2) # make sure we wrap back to first city
sum(D[cbind(tour.wrap[,2], tour.wrap[,1])])
}
# inverse of thetotal distance is the fitness (because the GA maximizes)
tspFitness <- function(tour, ...) 1/tourLength(tour, ...)
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(eurodist, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 20000, temp = 100,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(eurodist, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 200000, temp = 1000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(eurodist, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 200000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(eurodist, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 1000000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
distmat <- as.matrix(eurodist)
numcities = dim(distmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(distmat, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 100000, temp = 1000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
distmat <- as.matrix(eurodist)
numcities = dim(distmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(distmat, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(1)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 100000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
distmat <- as.matrix(eurodist)
numcities = dim(distmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(distmat, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(2)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 100000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
distmat <- as.matrix(eurodist)
numcities = dim(distmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(distmat, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(2)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = distmat,
method = "SANN",
control = list(maxit = 50000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
# this is the subtour reversal step described in the textbook
subtourReverse <- function(tour,D) {  # Generate new candidate sequence
swap.pair <- sample(1:length(tour), size = 2, replace = FALSE)
tour[swap.pair] <- tour[swap.pair[c(2,1)]]
tour
}
# load data
eurodistmat <- as.matrix(eurodist)
numcities = dim(eurodistmat)[1]
# this creates plausible coordinates from the distance matrix.  not necessary for
# the HW problem where we read the coordinates from a file
loc <- -cmdscale(distmat, add = TRUE)$points
x <- loc[,1]; y <- loc[,2]
set.seed(2)
tour.init = 1:numcities
res = optim(tour.init, tourLength, subtourReverse, D = eurodistmat,
method = "SANN",
control = list(maxit = 50000, temp = 2000,
trace = FALSE, REPORT = 500) )
totaldist <- res$value
tour <- res$par
plotTour(x,y,tour,totaldist,"Best SANN tour.")
